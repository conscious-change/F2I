name: Jekyll Build and Test

on:
  push:
    branches: [ development, main ]
  pull_request:
    branches: [ development, main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_PAT }}
        fetch-depth: 0

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true

    - name: Install system dependencies
      run: |
          sudo apt-get update
          sudo apt-get install -y build-essential imagemagick libmagickwand-dev webp

    - name: Make scripts executable
      run: |
        chmod +x run_site.sh
        chmod +x scripts/process-images.sh

    - name: Install Bundler and handle version mismatches
      run: |
        # Install bundler
        gem install bundler

        # Check if we need to update bundler version in Gemfile.lock
        if grep -q "BUNDLED WITH" Gemfile.lock; then
          bundled_with_version=$(grep -A 1 "BUNDLED WITH" Gemfile.lock | tail -n 1 | tr -d ' ')
          installed_bundler_version=$(gem list bundler | grep -o "[0-9.]*" | head -n 1)

          echo "Gemfile.lock requires Bundler $bundled_with_version, installed version is $installed_bundler_version"

          if [ "$bundled_with_version" != "$installed_bundler_version" ]; then
            echo "Updating Gemfile.lock to use Bundler $installed_bundler_version..."
            sed -i "s/BUNDLED WITH.*$/BUNDLED WITH/" Gemfile.lock
            sed -i "s/   $bundled_with_version.*$/   $installed_bundler_version/" Gemfile.lock
          fi
        fi

    - name: Install dependencies
      run: bundle install

    - name: Process responsive images
      run: |
        ./scripts/process-images.sh --recursive

    - name: Debug run_site.sh
      run: |
        echo "Content of run_site.sh before modification:"
        cat run_site.sh
        
        # Modify run_site.sh to build instead of serve in CI environment
        sed -i 's/bundle exec jekyll serve/bundle exec jekyll build --baseurl "\/F2I"/' run_site.sh
        
        echo "Content of run_site.sh after modification:"
        cat run_site.sh
        
        # Run the script but skip the interactive prompts
        ./run_site.sh
        
        echo "Build completed. Checking _site directory:"
        ls -la _site/

    # Copy the built site from _site to docs
    - name: Copy site to docs directory
      run: |
        mkdir -p docs
        cp -r _site/* docs/

    # Only run the commit and push steps on the main branch
    - name: Commit docs directory to main branch
      if: github.ref == 'refs/heads/main'
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add docs/
        git commit -m "Update docs directory for GitHub Pages" || echo "No changes to commit"
        git push

    # - name: Run HTML tests
    #   run: |
    #     gem install html-proofer
    #     htmlproofer ./_site --disable-external --allow-hash-href --assume-extension true --ignore-empty-alt --ignore-missing-alt
   
    - name: Upload site artifact
      uses: actions/upload-artifact@v4
      with:
        name: site
        path: _site/
# deploy:
#   needs: build
#   if: github.ref == 'refs/heads/main'
#   runs-on: ubuntu-latest
#
#   steps:
#   - name: Download site artifact
#     uses: actions/download-artifact@v4
#     with:
#       name: site
#       path: _site
#
#   - name: Deploy to GitHub Pages
#     uses: peaceiris/actions-gh-pages@v3
#     with:
#       personal_token: ${{ secrets.GH_PAT }}
#       publish_dir: ./_site
#       keep_files: false
#       force_orphan: true
